// Copyright 2013 Justin Wilson. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package rc2

var (
	piTable = [256]byte{
		//          0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
		/* 00 */ 0xD9, 0x78, 0xF9, 0xC4, 0x19, 0xDD, 0xB5, 0xED, 0x28, 0xE9, 0xFD, 0x79, 0x4A, 0xA0, 0xD8, 0x9D,
		/* 10 */ 0xC6, 0x7E, 0x37, 0x83, 0x2B, 0x76, 0x53, 0x8E, 0x62, 0x4C, 0x64, 0x88, 0x44, 0x8B, 0xFB, 0xA2,
		/* 20 */ 0x17, 0x9A, 0x59, 0xF5, 0x87, 0xB3, 0x4F, 0x13, 0x61, 0x45, 0x6D, 0x8D, 0x09, 0x81, 0x7D, 0x32,
		/* 30 */ 0xBD, 0x8F, 0x40, 0xEB, 0x86, 0xB7, 0x7B, 0x0B, 0xF0, 0x95, 0x21, 0x22, 0x5C, 0x6B, 0x4E, 0x82,
		/* 40 */ 0x54, 0xD6, 0x65, 0x93, 0xCE, 0x60, 0xB2, 0x1C, 0x73, 0x56, 0xC0, 0x14, 0xA7, 0x8C, 0xF1, 0xDC,
		/* 50 */ 0x12, 0x75, 0xCA, 0x1F, 0x3B, 0xBE, 0xE4, 0xD1, 0x42, 0x3D, 0xD4, 0x30, 0xA3, 0x3C, 0xB6, 0x26,
		/* 60 */ 0x6F, 0xBF, 0x0E, 0xDA, 0x46, 0x69, 0x07, 0x57, 0x27, 0xF2, 0x1D, 0x9B, 0xBC, 0x94, 0x43, 0x03,
		/* 70 */ 0xF8, 0x11, 0xC7, 0xF6, 0x90, 0xEF, 0x3E, 0xE7, 0x06, 0xC3, 0xD5, 0x2F, 0xC8, 0x66, 0x1E, 0xD7,
		/* 80 */ 0x08, 0xE8, 0xEA, 0xDE, 0x80, 0x52, 0xEE, 0xF7, 0x84, 0xAA, 0x72, 0xAC, 0x35, 0x4D, 0x6A, 0x2A,
		/* 90 */ 0x96, 0x1A, 0xD2, 0x71, 0x5A, 0x15, 0x49, 0x74, 0x4B, 0x9F, 0xD0, 0x5E, 0x04, 0x18, 0xA4, 0xEC,
		/* a0 */ 0xC2, 0xE0, 0x41, 0x6E, 0x0F, 0x51, 0xCB, 0xCC, 0x24, 0x91, 0xAF, 0x50, 0xA1, 0xF4, 0x70, 0x39,
		/* b0 */ 0x99, 0x7C, 0x3A, 0x85, 0x23, 0xB8, 0xB4, 0x7A, 0xFC, 0x02, 0x36, 0x5B, 0x25, 0x55, 0x97, 0x31,
		/* c0 */ 0x2D, 0x5D, 0xFA, 0x98, 0xE3, 0x8A, 0x92, 0xAE, 0x05, 0xDF, 0x29, 0x10, 0x67, 0x6C, 0xBA, 0xC9,
		/* d0 */ 0xD3, 0x00, 0xE6, 0xCF, 0xE1, 0x9E, 0xA8, 0x2C, 0x63, 0x16, 0x01, 0x3F, 0x58, 0xE2, 0x89, 0xA9,
		/* e0 */ 0x0D, 0x38, 0x34, 0x1B, 0xAB, 0x33, 0xFF, 0xB0, 0xBB, 0x48, 0x0C, 0x5F, 0xB9, 0xB1, 0xCD, 0x2E,
		/* f0 */ 0xC5, 0xF3, 0xDB, 0x47, 0xE5, 0xA5, 0x9C, 0x77, 0x0A, 0xA6, 0x20, 0x68, 0xFE, 0x7F, 0xC1, 0xAD,
	}
)

// Encrypt one block, 8 bytes, from src into dst, using the expanded key k
func encryptBlock(xk []uint16, dst, src []byte) {
	// Convert the bytes into words
	r0, r1, r2, r3 :=
		uint16(src[0])|uint16(src[1])<<8,
		uint16(src[2])|uint16(src[3])<<8,
		uint16(src[4])|uint16(src[5])<<8,
		uint16(src[6])|uint16(src[7])<<8

	// Performs 5 mixing, 1 mashing, 6 mixing, 1 mashing, 5 mixing rounds
	for i := 0; i < 16; i++ {
		r0 = r0 + xk[4*i] + (r3 & r2) + ((^r3) & r1)
		r0 = r0<<1 | r0>>(15) // rotate left

		r1 = r1 + xk[4*i+1] + (r0 & r3) + ((^r0) & r2)
		r1 = r1<<2 | r1>>(14) // rotate left

		r2 = r2 + xk[4*i+2] + (r1 & r0) + ((^r1) & r3)
		r2 = r2<<3 | r2>>(13) // rotate left

		r3 = r3 + xk[4*i+3] + (r2 & r1) + ((^r2) & r0)
		r3 = r3<<5 | r3>>(11) // rotate left

		// Mashing rounds
		if i == 4 || i == 10 {
			r0 = r0 + xk[r3&63]
			r1 = r1 + xk[r0&63]
			r2 = r2 + xk[r1&63]
			r3 = r3 + xk[r2&63]
		}
	}

	// Convert the words back into bytes
	dst[1], dst[0] = uint8(r0>>8), uint8(r0&0xff)
	dst[3], dst[2] = uint8(r1>>8), uint8(r1&0xff)
	dst[5], dst[4] = uint8(r2>>8), uint8(r2&0xff)
	dst[7], dst[6] = uint8(r3>>8), uint8(r3&0xff)
}

// Decrypt one block, 8 bytes, from src into dst, using the expanded key k
func decryptBlock(xk []uint16, dst, src []byte) {
	// Convert the bytes into words
	r0, r1, r2, r3 :=
		uint16(src[0])|uint16(src[1])<<8,
		uint16(src[2])|uint16(src[3])<<8,
		uint16(src[4])|uint16(src[5])<<8,
		uint16(src[6])|uint16(src[7])<<8

	// Performs 5 mixing, 1 mashing, 6 mixing, 1 mashing, 5 mixing rounds
	for i := 15; i >= 0; i-- {
		// Mashing rounds
		if i == 4 || i == 10 {
			r3 = r3 - xk[r2&63]
			r2 = r2 - xk[r1&63]
			r1 = r1 - xk[r0&63]
			r0 = r0 - xk[r3&63]
		}

		r3 = r3>>5 | r3<<11 // rotate right
		r3 = r3 - xk[4*i+3] - (r2 & r1) - ((^r2) & r0)

		r2 = r2>>3 | r2<<13 // rotate right
		r2 = r2 - xk[4*i+2] - (r1 & r0) - ((^r1) & r3)

		r1 = r1>>2 | r1<<14 // rotate right
		r1 = r1 - xk[4*i+1] - (r0 & r3) - ((^r0) & r2)

		r0 = r0>>1 | r0<<15 // rotate right
		r0 = r0 - xk[4*i] - (r3 & r2) - ((^r3) & r1)
	}

	// Convert the words back into bytes
	dst[1], dst[0] = uint8(r0>>8), uint8(r0&0xff)
	dst[3], dst[2] = uint8(r1>>8), uint8(r1&0xff)
	dst[5], dst[4] = uint8(r2>>8), uint8(r2&0xff)
	dst[7], dst[6] = uint8(r3>>8), uint8(r3&0xff)
}

// Expand the given key into a 64bit word key
func expandKey(key []byte, k []uint16) {
	var i int
	t := len(key)
	// Temporary byte key
	l := make([]byte, 128)
	copy(l, key)

	// First loop
	for i = t; i < 128; i++ {
		l[i] = piTable[l[i-1]+l[i-t]]
	}

	// Intermediate step
	t1 := t << 3
	t8 := (t1 + 7) / 8
	// This is what's stated in the RFC, subsequent is to avoid math import & casts
	//tm := 255 % uint16(math.Pow(2, float64(8 + t1 - 8*t8)) )
	tm := (255 >> uint16(7&-t<<3))
	l[128-t8] = piTable[l[128-t8]&byte(tm)]

	// Second loop
	for i = 127 - t8; i >= 0; i-- {
		l[i] = piTable[l[i+1]^l[i+t8]]
	}

	// Generate the word key
	for i := 0; i < 64; i++ {
		//k[i] = uint16(l[2*i]) + 256*uint16(l[2*i+1])
		k[i] = uint16(l[i*2]) | uint16(l[i*2+1])<<8
	}
}
